#!/usr/bin/env python3
# coding: utf-8
# MIT License Â© https://github.com/scherma
# contact http_error_418 @ unsafehex.com

import libvirt, psycopg2, psycopg2.extras, configparser, logging, os, multiprocessing
import sys, vmworker, threading, argparse, json, time, subprocess, maintenance, arrow

logger = logging.getLogger("antfarm")

fmt = "%(levelname)s %(message)s"
dfmt ="%Y%m%d %H:%M:%S"
formatter = logging.Formatter(fmt=fmt, datefmt=dfmt)

NUM_LEVEL = 20
RUN_NUM_LEVEL = 20


class Broker():
    def __init__(self, config):
        self.conf = config
        self.lv_conn = libvirt.open("qemu:///system")
        self.cursor, self.dbconn = self._db_conn(self.conf.get("General", "dbname"), self.conf.get("General", "dbuser"), self.conf.get("General" ,"dbpass"))
        self._wipe_workerstate()
        self.next_maintenance = self._give_next_maintenance()

    def _give_next_maintenance(self):
        return arrow.utcnow().floor("day").shift(days=1, hours=1)
        
    def _db_conn(self, db, user, password):
        host = "localhost"
        conn_string = "host='{0}' dbname='{1}' user='{2}' password='{3}'".format(host, db, user, password)
        conn = psycopg2.connect(conn_string)
        conn.autocommit = True
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        logger.debug('DB connection started on {0} to db "{1}" with user "{2}"'.format(host, db, user))
        return cursor, conn
            
    def _list_available_victims(self):
        self.cursor.execute("""SELECT uuid,runcounter,status FROM victims WHERE status = 'production' AND uuid NOT IN (SELECT uuid FROM workerstate WHERE position != 'idle' AND position IS NOT NULL) ORDER BY runcounter DESC""")
        victims = self.cursor.fetchall()
        available = []
        for idx, victim in enumerate(victims):
            if victim["runcounter"] > int(self.conf.get("General", "maintenance_after")) and victim["status"] == "production":
                self.maintenance(victim)
            else:
                available.append(victim)
        return available

    def _list_running_victims(self):
        self.cursor.execute("""SELECT * FROM workerstate LEFT JOIN victims ON workerstate.uuid=victims.uuid WHERE workerstate.position != 'idle'""")
        return self.cursor.fetchall()
                        
    def _exit(self, value=0):
        self.dbconn.close()
        logger.info("Closed connection to DB - cleanup complete, exiting now.")
        exit(value)
    
    def _wipe_workerstate(self):
        self.dbconn.rollback()
        self.cursor.execute("""DELETE FROM "workerstate" WHERE 1=1""")
        self.dbconn.commit()
        logger.info("Emptied workerstate table")
    
    def _cleanup(self):
        lv_conn = libvirt.open("qemu:///system")
        for vm in self.vm_tracker:
            lv_conn.lookupByUUIDString(vm["uuid"]).suspend()
            logger.info("Paused worker VMs")
        self._wipe_workerstate()
        
    def _check_cases(self):
        self.cursor.execute("""SELECT cases.*, suspects.sha256, suspects.sha1, suspects.md5 FROM cases """ +
            """LEFT JOIN suspects ON cases.sha256=suspects.sha256 WHERE status='submitted' ORDER BY cases.priority DESC, cases.submittime ASC""")
        rows = self.cursor.fetchall()
        return rows
        
        
    def manage(self, host="localhost"):
        try:
            while True:
                if arrow.utcnow() < self.next_maintenance:
                    available = self._list_available_victims()
                    cases = self._check_cases()
                    if cases:
                        logger.info("Found {0} available victims".format(len(available)))
                        for case in cases:
                            if available:                            
                                case["hashes"] = {"sha256": case["sha256"], "sha1": case["sha1"], "md5": case["md5"]}
                                case["reboots"] = int(case["reboots"])
                                victim = available.pop()
                                logger.info("Allocated case {0} to victim uuid {1}".format(case["uuid"], victim["uuid"]))
                                w = vmworker.Worker(self.conf, victim, NUM_LEVEL, RUN_NUM_LEVEL)
                                w.prep_for_run()
                                w._state_update("assigned", (True, case))
                                m = multiprocessing.Process(target=w.process, args=(case,))
                                m.start()
                            else:
                                logger.info("Found {0} case(s) ready to assign but no workers were available".format(len(cases)))
                                break
                else:
                    self.cursor.execute("""SELECT * FROM victims""")
                    rows = self.cursor.fetchall()
                    self.cursor.execute("""UPDATE victims SET status='maintenance' WHERE 1=1""")
                    # wait until all running cases have completed
                    while len(self._list_running_victims()) > 0:
                        time.sleep(30)
                    maintenance.restart_services()
                    # restore previous status
                    for row in rows:
                        self.cursor.execute("""UPDATE victims SET status=%s WHERE uuid=%s""", (row["status"], row["uuid"]))
                    
                    # set the next maintenance window time
                    self.next_maintenance = self._give_next_maintenance()
                    
                    
                    
                time.sleep(10)
        
        except Exception:
            ex_type, ex, tb = sys.exc_info()
            fname = os.path.split(tb.tb_frame.f_code.co_filename)[1]
            lineno = tb.tb_lineno
            logger.error("Fatal exception in manager: {0} {1} in {2}, line {3}, exiting main thread".format(ex_type, ex, fname, lineno))
        finally:
            self.cursor.execute("""SELECT * FROM victims""")
            rows = self.cursor.fetchall()
            logger.info("Removing all workers from active table")
            self.cursor.execute("""DELETE FROM workerstate WHERE 1=1""")
            self.dbconn.commit()
            logger.info("Suspending all VMs")
            for row in rows:
                self.lv_conn.lookupByUUIDString(row["uuid"]).suspend()
            
            logger.info("Cleanup complete, exiting manager")

    def maintenance(self, victim):
        w = vmworker.Worker(self.conf, victim, NUM_LEVEL, RUN_NUM_LEVEL)
        w._state_update('maintenance')
        m = multiprocessing.Process(target=w.do_maintenance)
        m.start()
        
            
            
class ResourceUnavailable(IndexError):
    def __init__(self, message):
        super(IndexError, self).__init__(message)

def set_defaults(conf):
    conf["General"] = {
        "loglevel": "DEBUG",
        "logdir": "/usr/local/unsafehex/antfarm/runmanager/logs",
        "basedir": "/usr/local/unsafehex",
        "runloglevel": "INFO",
        "instancename": "antfarm",
        "mountdir": "/mnt/vpart",
        "dbname": "antfarm",
        "dbuser": "antfarm",
        "suricata_log": "/var/log/suricata/eve.json",
        "maintenance_after": "50"
    }
    return conf



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--loglevel", dest="loglevel")
    parser.add_argument("--logdir", dest="logdir")
    parser.add_argument("--runloglevel", dest="runloglevel")
    parser.add_argument("-n", "--instancename", dest="instancename")
    parser.add_argument("-m", "--mountdir", dest="mountdir")
    parser.add_argument("config", default="runmanager.conf", type=argparse.FileType())
    args = parser.parse_args()
    
    conf = configparser.ConfigParser()

    conf = set_defaults(conf)
    
    conf.readfp(args.config)
    if args.loglevel:
        conf.set("General", "loglevel", args.loglevel)
    if args.runloglevel:
        conf.set("General", "runloglevel", args.runloglevel)
    if args.logdir:
        conf.set("General", "logdir", args.logdir)
    if args.instancename:
        conf.set("General", "instancename", args.instancename)
    
    global NUM_LEVEL
    NUM_LEVEL = getattr(logging, conf.get("General", "loglevel").upper(), None)
    if not isinstance(NUM_LEVEL, int):
        raise ValueError("Invalid log level '{0}'".format(NUM_LEVEL))
    
    global RUN_NUM_LEVEL
    RUN_NUM_LEVEL = getattr(logging, conf.get("General", "runloglevel").upper(), None)
    if not isinstance(RUN_NUM_LEVEL, int):
        raise ValueError("Invalid log level '{0}'".format(RUN_NUM_LEVEL))
    
    logging.basicConfig(level=logging.CRITICAL, format=fmt, datefmt=dfmt)
            
    logger.setLevel(NUM_LEVEL)

    maintenance.start_all_services()
            
    try:
        b = Broker(conf)
    except KeyError:
        logger.error("Invalid configuration supplied!")
        exit(1)

    logger.info("Broker starting...")
    
    b.manage()
    

if __name__ == "__main__":
    main()
